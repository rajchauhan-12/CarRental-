pipeline {
    agent any
    
    tools {
        git 'Default' // Make sure this matches your Git tool name in Jenkins Global Tool Configuration
    }
    
    environment {
        DOCKER_IMAGE = 'carrental-app'
        DOCKER_TAG = 'latest'
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    // Clean workspace before checkout
                    cleanWs()
                    
                    // Checkout with retry for Windows stability
                    retry(3) {
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: '*/main']],
                            extensions: [[$class: 'CloneOption', depth: 1, timeout: 30]],
                            userRemoteConfigs: [[
                                url: 'https://github.com/rajchauhan-12/CarRental-.git',
                                credentialsId: '' // Add if private repo
                            ]]
                        ])
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Build with cache for faster builds
                    docker.build("${env.DOCKER_IMAGE}:${env.DOCKER_TAG}", "--build-arg BUILDKIT_INLINE_CACHE=1 .")
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    // Run tests inside a Docker container
                    docker.image("${env.DOCKER_IMAGE}:${env.DOCKER_TAG}").inside {
                        // For Node.js projects (modify for your tech stack)
                        sh 'npm test'
                        
                        // For Java projects:
                        // sh 'mvn test'
                        
                        // For Python projects:
                        // sh 'pytest'
                    }
                }
            }
            post {
                always {
                    junit '**/test-results/*.xml' // Update path to your test results
                }
            }
        }
        
        stage('Deploy to Localhost') {
            steps {
                script {
                    // Stop and remove existing container if running
                    bat 'docker stop ${DOCKER_IMAGE} || exit 0'
                    bat 'docker rm ${DOCKER_IMAGE} || exit 0'
                    
                    // Run new container with proper Windows path formatting
                    docker.run(
                        "${env.DOCKER_IMAGE}:${env.DOCKER_TAG}",
                        "--name ${env.DOCKER_IMAGE} -p 3000:3000 -d --restart unless-stopped"
                    )
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed - cleaning up'
            script {
                // Clean up unused Docker containers and images
                bat 'docker system prune -f || exit 0'
            }
        }
        success {
            echo 'Pipeline succeeded!'
            // Optional: Add notification (email, Slack, etc.)
        }
        failure {
            echo 'Pipeline failed!'
            // Optional: Add failure notification
        }
    }
}
